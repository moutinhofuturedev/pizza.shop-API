import Elysia, { t } from 'elysia'
import { db } from '../../db/connection'
import { createId } from '@paralleldrive/cuid2'
import { authLinks } from '../../db/schema'
import { env } from '../../env'
import chalk from 'chalk'

/**
 * Rota para enviar links de autentica√ß√£o aos usu√°rios.
 */
export const sendAuthLinks = new Elysia()

/**
 * Envia um link de autentica√ß√£o ao usu√°rio com o email fornecido.
 *
 * @param {Object} body - O corpo da solicita√ß√£o que cont√©m o email do usu√°rio.
 * @returns {Promise<void>} - Uma promessa que √© resolvida quando o link de autentica√ß√£o √© enviado.
 * @throws {Error} - Se o usu√°rio com o e-mail fornecido n√£o for encontrado.
 */
sendAuthLinks.post(
  'authenticate',
  async ({ body }) => {
    const { email } = body

    // Encontre o usu√°rio com o e-mail fornecido
    const userFromEmail = await db.query.users.findFirst({
      where(fields, { eq }) {
        return eq(fields.email, email)
      },
    })

    // Se o usu√°rio n√£o for encontrado, gera um erro
    if (!userFromEmail) {
      throw new Error('User not found')
    }

    // Gere um c√≥digo de link de autentica√ß√£o exclusivo
    const authLinkCode = createId()

    // Insira o c√≥digo do link de autentica√ß√£o e o ID do usu√°rio no banco de dados
    await db.insert(authLinks).values({
      userId: userFromEmail.id,
      code: authLinkCode,
    })

    // Crie o URL do link de autentica√ß√£o
    const authLink = new URL('/auth-links/authenticate', env.API_BASE_URL)

    authLink.searchParams.set('code', authLinkCode) // example: http://localhost:3333/auth-links/authenticate?code=123456
    authLink.searchParams.set('redirect', env.AUTH_REDIRECT_URL)

    // Log the authentication link URL
    console.log(chalk.greenBright(`üîó Auth link: ${authLink.toString()}`))
  },
  {
    body: t.Object({
      email: t.String({ format: 'email' }),
    }),
  },
)
